
////////////////////////////////////////////////////////////////////////
//** ENGR-2350 Template Project
//** NAME: Rudra Patel
//** RIN: 662051071
//** This is the base project for several activities and labs throughout
//** the course.  The outline provided below isn't necessarily *required*
//** by a C program; however, this format is required within ENGR-2350
//** to ease debugging/grading by the staff.
////////////////////////////////////////////////////////////////////////

#include "engr2350_msp432.h"


// Function prototypes
uint16_t readRanger();

void spin();
void I2CInit();

void GPIO_Init();
void Timer_Init();

void updateLeft(int change);
void updateRight(int change);
void drive();

// Global variables
uint16_t leftWheel = 0;
uint16_t rightWheel = 0;
uint8_t input;

Timer_A_UpModeConfig config;
Timer_A_CompareModeConfig RPWM;
Timer_A_CompareModeConfig LPWM;
eUSCI_I2C_MasterConfig  i2;
uint32_t min= 1000;

uint8_t flag=0;

int main(void) {
    SysInit();
    GPIO_Init();
    I2CInit();
    Timer_Init();



    // Main loop
    while(1) {


     //   spin();
     //   __delay_cycles(2.4e6); // Wait 1/10 of a second


        Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, 200);
          uint32_t J;

             printf("1");
             Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, 200);

             J = readRanger();
             printf("Ranger: %4u\r\n",J );
             __delay_cycles(2.4e6); // Wait 1/10 of a seconnd

          while(flag==0){







          //if( (J < min) && (J<200) && (J!= -1) ){
           //   printf("4");
            //  min = J;}


         // if( (J <= (min+10))& ( J >= (min+10))  ){
              if(J<40){
              printf("78");
              Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, 0);
              //GPIO_setOutputLowOnPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7);

              flag=1; }



      }



/*

        input = getchar();
        putchar(input); //

        if(input == 'a' || input == 'A') {
            printf("UP LEFT");
            updateLeft(100);
        }
        else if(input == 'z' || input == 'Z') {
            printf("DOWN LEFT");
            updateLeft(-100);
        }
        else if(input == 's' || input == 'S') {
            printf("UP RIGHT");
            updateRight(100);
        }
        else if(input == 'x' || input == 'X') {
            printf("DOWN RIGHT");
            updateRight(-100);
        }

*/

    }



}

void GPIO_Init() {

    GPIO_setAsOutputPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7); // Enable pins
    GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN4 | GPIO_PIN5); // Direction pins



    GPIO_setOutputHighOnPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7); // Enable motors
    GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN4 | GPIO_PIN5); // Forward direction


    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P6, GPIO_PIN6, GPIO_SECONDARY_MODULE_FUNCTION);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P6, GPIO_PIN7, GPIO_SECONDARY_MODULE_FUNCTION);

    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P2, GPIO_PIN6, GPIO_PRIMARY_MODULE_FUNCTION);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P2, GPIO_PIN7, GPIO_PRIMARY_MODULE_FUNCTION);
}


void I2CInit(){
    i2.selectClockSource= EUSCI_B_I2C_CLOCKSOURCE_SMCLK;
    i2.i2cClk= 24000000;
    i2.dataRate= EUSCI_B_I2C_SET_DATA_RATE_100KBPS;

    I2C_initMaster(EUSCI_B3_BASE,&i2);

    I2C_enableModule(EUSCI_B3_BASE);





}


void Timer_Init() {

    config.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;

    config.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;

    config.timerPeriod = 1000 ;



    Timer_A_configureUpMode(TIMER_A0_BASE, &config);

    // Lpwm


    LPWM.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_3;

    LPWM.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;

    LPWM.compareValue = leftWheel;

    Timer_A_initCompare(TIMER_A0_BASE, &LPWM);


    //Rpwm
    RPWM.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_4;

    RPWM.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;

    RPWM.compareValue = rightWheel;

    Timer_A_initCompare(TIMER_A0_BASE, &RPWM);



    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
}







void updateLeft(int change) {
    leftWheel  += change;
    printf("%d",leftWheel);
    Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, leftWheel);
}

void updateRight(int change) {
    rightWheel += change;
    printf("%d",rightWheel);
    Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_4, rightWheel);
}


uint16_t readRanger(){

    uint8_t arry[2];
    uint8_t arry2[1];

    arry2[0]= 0x51;

        I2C_readData(EUSCI_B3_BASE,0x70,2,arry,2);
        uint16_t x;

        x = arry[0];

        x= x<<8;

        x = x+arry[1];

        I2C_writeData(EUSCI_B3_BASE,0x70,0,arry2,1);

        return x;
    }




void spin(){

    uint32_t min;

    min= 1000;

    uint32_t J;
    uint8_t flag=0;


    Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, 100);

    while(flag==0){



    J = readRanger();

    __delay_cycles(2.4e6);

    if( (J < min) && (J<100) && (J!= -1) ){

        min = J;}


    if( (J <= (min+10))& ( J >= (min+10))  ){

        updateRight(-100);

        flag=1; }


}
}
